name: Publish library on TestPyPI and DockerHub

on:
  release:
    types: [ published ]

defaults:
  run:
    shell: bash

jobs:
  check:
    name: Lint, Build and Test the library
    uses: ./.github/workflows/ci-pipeline.yml

  docker:
    name: Upload image to DockerHub
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: user/app:latest

  testpypi:
    name: Build and Publish the library on TestPyPI
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build the library
        run: python -m build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  notify:
    name: Send notification to Telegram
    needs: [ check, docker, testpypi ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/telegram-action@master
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_TO }}
          message: |
            New release ${{ github.ref }} in ${{ github.repository }}
            Author: ${{ github.actor }}
            
            CD status: ${{ needs.check.result }}
            Docker status: ${{ needs.docker.result }}
            TestPyPI status: ${{ needs.testpypi.result }}
